// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product Types (cuadros, reproducciones, camisetas, etc.)
model ProductType {
  id          String    @id @default(cuid())
  name        String    @unique // "cuadros", "reproducciones", "camisetas"
  displayName String    // "Cuadros Originales", "Reproducciones", "Camisetas"
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products    Product[]
  attributes  ProductTypeAttribute[]

  @@map("product_types")
}

// Dynamic attributes for each product type (Talla, Material, etc.)
model ProductTypeAttribute {
  id            String              @id @default(cuid())
  productTypeId String
  name          String              // "talla", "material"
  displayName   String              // "Talla", "Material"
  type          AttributeType       @default(SELECT) // SELECT, TEXT, NUMBER
  isRequired    Boolean             @default(false)
  sortOrder     Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relations
  productType   ProductType         @relation(fields: [productTypeId], references: [id], onDelete: Cascade)
  options       AttributeOption[]
  variantValues ProductVariantAttributeValue[]

  @@unique([productTypeId, name])
  @@map("product_type_attributes")
}

// Options for SELECT type attributes (S, M, L, XL)
model AttributeOption {
  id          String                 @id @default(cuid())
  attributeId String
  value       String                 // "S", "M", "L"
  displayName String                 // "Pequeño", "Mediano", "Grande"
  sortOrder   Int                    @default(0)
  isActive    Boolean                @default(true)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // Relations
  attribute   ProductTypeAttribute   @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variantValues ProductVariantAttributeValue[]

  @@unique([attributeId, value])
  @@map("attribute_options")
}

// Main products table
model Product {
  id            String        @id @default(cuid())
  productTypeId String
  title         String
  description   String?
  slug          String        @unique
  basePrice     Int           // base price in cents
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  productType   ProductType   @relation(fields: [productTypeId], references: [id])
  variants      ProductVariant[]
  images        ProductImage[]

  @@map("products")
}

// Product variants (different combinations of attributes)
model ProductVariant {
  id          String    @id @default(cuid())
  productId   String
  sku         String?   @unique
  price       Int       // price in cents
  stock       Int       @default(0) // quantity available
  status      VariantStatus @default(AVAILABLE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValues ProductVariantAttributeValue[]
  orderItems  OrderItem[]

  @@map("product_variants")
}

// Values for each variant's attributes (Talla: M, Color: Rojo)
model ProductVariantAttributeValue {
  id              String               @id @default(cuid())
  variantId       String
  attributeId     String
  optionId        String?              // for SELECT attributes
  textValue       String?              // for TEXT attributes
  numberValue     Float?               // for NUMBER attributes
  createdAt       DateTime             @default(now())

  // Relations
  variant         ProductVariant       @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attribute       ProductTypeAttribute @relation(fields: [attributeId], references: [id])
  option          AttributeOption?     @relation(fields: [optionId], references: [id])

  @@unique([variantId, attributeId])
  @@map("product_variant_attribute_values")
}

// Product images
model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  url         String
  altText     String?
  sortOrder   Int      @default(0)
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Updated Orders system
model Order {
  id                    String      @id @default(cuid())
  customerEmail         String
  customerName          String
  customerPhone         String?
  shippingAddress       String?
  paypalOrderId         String?     @unique
  status                OrderStatus @default(PENDING)
  subtotal              Int         // subtotal in cents
  tax                   Int         @default(0) // tax in cents
  shipping              Int         @default(0) // shipping in cents
  total                 Int         // total in cents
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  items                 OrderItem[]

  @@map("orders")
}

// Order items (each product variant in the order)
model OrderItem {
  id        String         @id @default(cuid())
  orderId   String
  variantId String
  quantity  Int            @default(1)
  price     Int            // price per unit in cents at time of purchase
  total     Int            // quantity * price in cents
  createdAt DateTime       @default(now())

  // Relations
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model AdminUser {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         String   @default("admin")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("admin_users")
}

model ShippingSettings {
  id                     String   @id @default(cuid())
  standardRate           Int      @default(3000) // standard shipping in cents (€30.00 default)
  freeShippingThreshold  Int      @default(5000) // free shipping over this amount in cents (€50.00 default)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("shipping_settings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum AttributeType {
  SELECT    // Dropdown with predefined options
  TEXT      // Free text input
  NUMBER    // Numeric input
}

enum VariantStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
